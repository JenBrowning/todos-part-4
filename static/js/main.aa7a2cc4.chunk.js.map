{"version":3,"sources":["components/TodoHeader.js","actions/index.js","components/TodoFooter.js","components/TodoItem.js","components/TodoList.js","components/App.js","reducers/reducer.js","serviceWorker.js","index.js"],"names":["TodoHeader","state","title","handleChange","event","_this","setState","target","value","addTodo","props","keyCode","this","react_default","a","createElement","className","placeholder","onKeyDown","onChange","autoFocus","Component","connect","dispatch","type","payload","TodoFooter","_this$props","deleteAll","completed","filter","Link","to","onClick","todos","todoList","TodoItem","toggleCompleted","deleteOne","defaultChecked","TodoList","Fragment","components_TodoHeader","map","todo","components_TodoItem","key","id","components_TodoFooter","location","pathname","App","clickedId","allHandlingProps","length","Switch","Route","exact","path","render","components_TodoList","Object","assign","initialState","todoReducer","arguments","undefined","action","newest","userId","Math","floor","random","objectSpread","concat","toConsumableArray","newTodosDeleteComp","newTodosDelete","newTodosToggle","Boolean","window","hostname","match","store","createStore","ReactDOM","BrowserRouter","basename","process","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.aa7a2cc4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { addTodo } from \"../actions/index\";\n\nclass TodoHeader extends Component {\n  state = {\n    title: \"\"\n  };\n\n  handleChange = event => {\n    this.setState({\n      title: event.target.value\n    });\n  };\n\n  addTodo = event => {\n    const { addTodo } = this.props;\n    const { title } = this.state;\n\n    if (event.keyCode === 13) {\n      addTodo(title);\n      this.setState({\n        title: \"\"\n      });\n    }\n  };\n\n  render() {\n    const { title } = this.state;\n    return (\n      <header className=\"header\">\n        <h1>Todos</h1>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs doing?\"\n          value={title}\n          onKeyDown={this.addTodo}\n          onChange={this.handleChange}\n          autoFocus\n        />\n      </header>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addTodo: title => dispatch(addTodo(title))\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(TodoHeader);\n","export const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const ADD_TODO = \"ADD_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const CLEAR_COMPLETED_TODOS = \"CLEAR_COMPLETED_TODOS\";\n\nexport const toggleCompleted = id => {\n  return {\n    type: TOGGLE_TODO,\n    payload: id\n  };\n};\n\nexport const addTodo = title => {\n  return {\n    type: ADD_TODO,\n    payload: title\n  };\n};\n\nexport const deleteOne = id => {\n  return {\n    type: DELETE_TODO,\n    payload: id\n  };\n};\n\nexport const deleteAll = () => {\n  return {\n    type: CLEAR_COMPLETED_TODOS\n  };\n};\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { deleteAll } from \"../actions/index\";\n\nclass TodoFooter extends Component {\n  render() {\n    const { completed, deleteAll, filter } = this.props;\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          <strong>{this.props.completed}</strong> items(s) left\n        </span>\n        <ul className=\"filters\">\n          <li>\n            <Link to=\"/\" className={filter === \"/\" ? \"selected\" : \"\"}>\n              All\n            </Link>\n          </li>\n          <li>\n            <Link\n              to=\"/active\"\n              className={filter === \"/active\" ? \"selected\" : \"\"}\n            >\n              Active\n            </Link>\n          </li>\n          <li>\n            <Link\n              to=\"/completed\"\n              className={filter === \"/completed\" ? \"selected\" : \"\"}\n            >\n              Completed\n            </Link>\n          </li>\n        </ul>\n        <button className=\"clear-completed\" onClick={deleteAll}>\n          Clear Completed\n        </button>\n      </footer>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todoList\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteAll: () => dispatch(deleteAll())\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoFooter);\n","import React, { Component } from \"react\";\nimport { addTodo, deleteOne, toggleCompleted } from \"../actions/index\";\nimport { connect } from \"react-redux\";\n\nclass TodoItem extends Component {\n  render() {\n    const { title, completed, toggleCompleted, deleteOne } = this.props;\n\n    return (\n      <li className={completed ? \"completed\" : \"\"}>\n        <div className=\"view\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            onClick={toggleCompleted}\n            defaultChecked={completed}\n          />\n          <label>{title}</label>\n          <button className=\"destroy\" onClick={deleteOne} />\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default TodoItem;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport TodoHeader from \"./TodoHeader.js\";\nimport TodoFooter from \"./TodoFooter.js\";\nimport TodoItem from \"./TodoItem.js\";\n\nclass TodoList extends Component {\n  render() {\n    const { todos, addTodo } = this.props;\n\n    return (\n      <React.Fragment>\n        <TodoHeader addTodo={addTodo} />\n        <section className=\"main\">\n          <ul className=\"todo-list\">\n            {todos.map(todo => (\n              <TodoItem\n                key={todo.id}\n                title={todo.title}\n                completed={todo.completed}\n                toggleCompleted={this.props.toggleCompleted(todo.id)}\n                deleteOne={this.props.deleteOne(todo.id)}\n              />\n            ))}\n          </ul>\n        </section>\n        <TodoFooter\n          completed={this.props.completed}\n          deleteAll={this.props.deleteAll}\n          filter={this.props.location.pathname}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default TodoList;\n","import React, { Component } from \"react\";\nimport \"../index.css\";\nimport TodoList from \"./TodoList.js\";\nimport todoList from \"../todos.json\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { deleteOne, toggleCompleted } from \"../actions/index.js\";\nimport { connect } from \"react-redux\";\n\nclass App extends Component {\n  toggleCompleted = clickedId => event => {\n    this.props.toggleCompleted(clickedId);\n  };\n\n  deleteOne = clickedId => event => {\n    this.props.deleteOne(clickedId);\n  };\n\n  render() {\n    const { todos } = this.props;\n    const allHandlingProps = {\n      deleteOne: this.deleteOne,\n      toggleCompleted: this.toggleCompleted,\n      completed: todos.filter(todo => !todo.completed).length\n    };\n\n    return (\n      <section className=\"todoapp\">\n        <Switch>\n          <Route\n            exact\n            path=\"/active\"\n            render={props => (\n              <TodoList\n                {...props}\n                {...allHandlingProps}\n                todos={todos.filter(todo => !todo.completed)}\n              />\n            )}\n          />\n          <Route\n            exact\n            path=\"/completed\"\n            render={props => (\n              <TodoList\n                {...props}\n                {...allHandlingProps}\n                todos={todos.filter(todo => todo.completed)}\n              />\n            )}\n          />\n          <Route\n            exact\n            path=\"/\"\n            render={props => (\n              <TodoList {...props} {...allHandlingProps} todos={todos} />\n            )}\n          />\n        </Switch>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todoList\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteOne: id => dispatch(deleteOne(id)),\n    toggleCompleted: id => dispatch(toggleCompleted(id))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import {\n  TOGGLE_TODO,\n  ADD_TODO,\n  DELETE_TODO,\n  CLEAR_COMPLETED_TODOS\n} from \"../actions/index.js\";\nimport todoList from \"../todos.json\";\n\nconst initialState = {\n  todoList\n};\n\nconst todoReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      let makeId = Math.floor(Math.random() * 500000000);\n      let newest = {\n        userId: 1,\n        id: makeId,\n        title: action.payload,\n        completed: false\n      };\n      return {\n        ...state,\n        todos: [...state.todoList, newest]\n      };\n\n    case CLEAR_COMPLETED_TODOS:\n      const newTodosDeleteComp = state.todoList.filter(todo => !todo.completed);\n      return {\n        ...state,\n        todoList: newTodosDeleteComp\n      };\n\n    case DELETE_TODO:\n      const newTodosDelete = state.todoList.filter(todo => {\n        if (todo.id === action.payload) {\n          return false;\n        }\n\n        return true;\n      });\n      return {\n        ...state,\n        todoList: newTodosDelete\n      };\n\n    case TOGGLE_TODO:\n      const newTodosToggle = state.todoList.map(todo => {\n        if (todo.id === action.payload) {\n          todo.completed = !todo.completed;\n        }\n\n        return todo;\n      });\n      return {\n        ...state,\n        todoList: newTodosToggle\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todoReducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport todoReducer from \"./reducers/reducer.js\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\n\nlet store = createStore(todoReducer);\n\nconst Index = () => (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <Route render={props => <App pathname={props.location.pathname} />} />\n    </Provider>\n  </BrowserRouter>\n);\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Index />, document.getElementById(\"root\"));\n"],"sourceRoot":""}